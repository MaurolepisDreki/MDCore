cmake_minimum_required( VERSION 3.31 )
project( MDCore
	DESCRIPTION "Maurolepis Dreki's Core Library"
	LANGUAGES CXX )
set( PROJECT_VERSION_EPOCH 0 )
set( PROJECT_VERSION_MAJOR 0 )
set( PROJECT_VERSION_MINOR 0 )
set( PROJECT_VERSION_PATCH 1 )
set( PROJECT_VERSION_TWEAK 0 )
set( PROJECT_VERSION_BUILD 1 )

# Sanitize Version Info
if( NOT DEFINED PROJECT_VERSION_EPOCH )
	set( PROJECT_VERSION_EPOCH 0 )
elseif( NOT PROJECT_VERSION_EPOCH GREATER_EQUAL 0 )
	if( PROJECT_VERSION_EPOCH LESS 0 )
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_EPOCH cannot be negative." )
	else()
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_EPOCH must be a number." )
	endif()
endif()
if( NOT DEFINED PROJECT_VERSION_MAJOR )
	set( PROJECT_VERSION_MAJOR 0 )
elseif( NOT PROJECT_VERSION_MAJOR GREATER_EQUAL 0 )
	if( PROJECT_VERSION_MAJOR LESS 0 )
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_MAJOR cannot be negative." )
	else()
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_MAJOR must be a number." )
	endif()
endif()
if( NOT DEFINED PROJECT_VERSION_MINOR )
	set( PROJECT_VERSION_MINOR 0 )
elseif( NOT PROJECT_VERSION_MINOR GREATER_EQUAL 0 )
	if( PROJECT_VERSION_MINOR LESS 0 )
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_MINOR cannot be negative." )
	else()
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_MINOR must be a number." )
	endif()
endif()
if( NOT DEFINED PROJECT_VERSION_PATCH )
	set( PROJECT_VERSION_PATCH 0 )
elseif( NOT PROJECT_VERSION_PATCH GREATER_EQUAL 0 )
	if( PROJECT_VERSION_PATCH LESS 0 )
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_PATCH cannot be negative." )
	else()
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_PATCH must be a number." )
	endif()
endif()
if( NOT DEFINED PROJECT_VERSION_TWEAK )
	set( PROJECT_VERSION_TWEAK 0 )
elseif( NOT PROJECT_VERSION_TWEAK GREATER_EQUAL 0 )
	if( PROJECT_VERSION_TWEAK LESS 0 )
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_TWEAK cannot be negative." )
	else()
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_TWEAK must be a number." )
	endif()
endif()
if( NOT DEFINED PROJECT_VERSION_BUILD )
	set( PROJECT_VERSION_BUILD 0 )
elseif( NOT PROJECT_VERSION_BUILD GREATER_EQUAL 0 )
	if( PROJECT_VERSION_BUILD LESS 0 )
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_BUILD cannot be negative." )
	else()
		message( SEND_ERROR "${PROJECT_NAME}_VERSION_BUILD must be a number." )
	endif()
endif()

# Compose Version String
set( PROJECT_VERSION "${PROJECT_VERSION_MAJOR}" )
if( PROJECT_VERSION_EPOCH GREATER 0 )
	string( PREPEND PROJECT_VERSION "${PROJECT_VERSION_EPOCH}:" )
endif()
if( PROJECT_VERSION_MINOR GREATER 0 OR PROJECT_VERSION_PATCH GREATER 0 OR PROJECT_VERSION_TWEAK GREATER 0 )
	string( APPEND PROJECT_VERSION ".${PROJECT_VERSION_MINOR}" )
endif()
if( PROJECT_VERSION_PATCH GREATER 0 OR PROJECT_VERSION_TWEAK GREATER 0 )
	string( APPEND PROJECT_VERSION ".${PROJECT_VERSION_PATCH}" )
endif()
if( PROJECT_VERSION_TWEAK GREATER 0 )
	string( APPEND PROJECT_VERSION ".${PROJECT_VERSION_TWEAK}" )
endif()
if( PROJECT_VERSION_BUILD GREATER 0 )
	string( APPEND PROJECT_VERSION "-${PROJECT_VERSION_BUILD}" )
endif()

# Export Version Info
if( PROJECT_IS_TOP_LEVEL )
	set( ${PROJECT_NAME}_VERSION_EPOCH ${PROJECT_VERSION_EPOCH} )
	set( ${PROJECT_NAME}_VERSION_MAJOR ${PROJECT_VERSION_MAJOR} )
	set( ${PROJECT_NAME}_VERSION_MINOR ${PROJECT_VERSION_MINOR} )
	set( ${PROJECT_NAME}_VERSION_PATCH ${PROJECT_VERSION_PATCH} )
	set( ${PROJECT_NAME}_VERSION_TWEAK ${PROJECT_VERSION_TWEAK} )
	set( ${PROJECT_NAME}_VERSION_BUILD ${PROJECT_VERSION_BUILD} )
	set( ${PROJECT_NAME}_VERSION "${PROJECT_VERSION}" )

	set( CMAKE_PROJECT_VERSION_EPOCH ${PROJECT_VERSION_EPOCH} )
	set( CMAKE_PROJECT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR} )
	set( CMAKE_PROJECT_VERSION_MINOR ${PROJECT_VERSION_MINOR} )
	set( CMAKE_PROJECT_VERSION_PATCH ${PROJECT_VERSION_PATCH} )
	set( CMAKE_PROJECT_VERSION_TWEAK ${PROJECT_VERSION_TWEAK} )
	set( CMAKE_PROJECT_VERSION_BUILD	${PROJECT_VERSION_BUILD} )
	set( CMAKE_PROJECT_VERSION ${PROJECT_VERSION} )
else()
	set( ${PROJECT_NAME}_VERSION_EPOCH ${PROJECT_VERSION_EPOCH} PARENT_SCOPE )
	set( ${PROJECT_NAME}_VERSION_MAJOR ${PROJECT_VERSION_MAJOR} PARENT_SCOPE )
	set( ${PROJECT_NAME}_VERSION_MINOR ${PROJECT_VERSION_MINOR} PARENT_SCOPE )
	set( ${PROJECT_NAME}_VERSION_PATCH ${PROJECT_VERSION_PATCH} PARENT_SCOPE )
	set( ${PROJECT_NAME}_VERSION_TWEAK ${PROJECT_VERSION_TWEAK} PARENT_SCOPE )
	set( ${PROJECT_NAME}_VERSION_BUILD ${PROJECT_VERSION_BUILD} PARENT_SCOPE )
	set( ${PROJECT_NAME}_VERSION "${PROJECT_VERSION}" PARENT_SCOPE )

	if( NOT DEFINED CMAKE_PROJECT_VERSION_EPOCH )
		set( CMAKE_PROJECT_VERSION_EPOCH 0 )
	endif()
	if( NOT DEFINED CMAKE_PROJECT_VERSION_MAJOR )
		set( CMAKE_PROJECT_VERSION_MAJOR 0 )
	endif()
	if( NOT DEFINED CMAKE_PROJECT_VERSION_MINOR )
		set( CMAKE_PROJECT_VERSION_MINOR 0 )
	endif()
	if( NOT DEFINED CMAKE_PROJECT_VERSION_PATCH )
		set( CMAKE_PROJECT_VERSION_PATCH 0 )
	endif()
	if( NOT DEFINED CMAKE_PROJECT_VERSION_TWEAK )
		set( CMAKE_PROJECT_VERSION_TWEAK 0 )
	endif()
	if( NOT DEFINED CMAKE_PROJECT_VERSION_BUILD )
		set( CMAKE_PROJECT_VERSION_BUILD 0 )
	endif()
endif()

# Modules
include( GNUInstallDirs )
include( UninstallTarget )

# Main Config
add_subdirectory( include )
add_subdirectory( src bin )

